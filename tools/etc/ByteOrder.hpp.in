#pragma once

#if defined(__cpp_lib_endian)
#include <bit>
#endif

namespace byte_order {
#if defined(__cpp_lib_endian)

#define BYTE_ORDER_NATIVE_BYTE_ORDER ((std::endian::native == std::endian::little) ? little : big)

#elif defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__

#define BYTE_ORDER_NATIVE_BYTE_ORDER little

#elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__

#define BYTE_ORDER_NATIVE_BYTE_ORDER big

#elif defined(__LITTLE_ENDIAN__)

#define BYTE_ORDER_NATIVE_BYTE_ORDER little

#elif defined(__BIG_ENDIAN__)

#define BYTE_ORDER_NATIVE_BYTE_ORDER big

#elif defined(_MSC_VER) || defined(__i386__) || defined(__x86_64__)

#define BYTE_ORDER_NATIVE_BYTE_ORDER little

#else

#define DETECTED_NATIVE_BYTE_ORDER %s
#if !defined(BYTE_ORDER_NATIVE_BYTE_ORDER)

#define BYTE_ORDER_NATIVE_BYTE_ORDER DETECTED_NATIVE_BYTE_ORDER

#endif

#endif

enum class ByteOrder
{
    little,
    big,
    native = BYTE_ORDER_NATIVE_BYTE_ORDER
};

} // namespace byte_order {

#undef DETECTED_NATIVE_BYTE_ORDER
#undef BYTE_ORDER_NATIVE_BYTE_ORDER

